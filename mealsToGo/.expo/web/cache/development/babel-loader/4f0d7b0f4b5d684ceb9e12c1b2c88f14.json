{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, createContext } from \"react\";\nimport { locationRequest, locationTransform } from \"./location.service\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var LocationContext = createContext();\nexport var LocationContextProvider = function LocationContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(\"San Francisco\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      keyword = _useState2[0],\n      setKeyword = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      location = _useState4[0],\n      setLocation = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      error = _useState8[0],\n      setError = _useState8[1];\n\n  var onSearch = function onSearch(searchKeyword) {\n    setIsLoading(true);\n    setKeyword(searchKeyword);\n    console.log(searchKeyword);\n\n    if (!searchKeyword.length) {\n      return;\n    }\n\n    locationRequest(searchKeyword.toLowerCase()).then(locationTransform).then(function (result) {\n      setIsLoading(false);\n      setLocation(result);\n      console.log(result);\n    }).catch(function (err) {\n      setIsLoading(false);\n      setError(err);\n    });\n  };\n\n  return _jsx(LocationContext.Provider, {\n    value: {\n      isLoading: isLoading,\n      error: error,\n      location: location,\n      search: function search() {\n        return onSearch;\n      },\n      keyword: keyword\n    },\n    children: children\n  });\n};","map":{"version":3,"sources":["/home/amaimon/work/udemy_courses/react_native_ztm/mealsToGo/src/services/location/location.context.js"],"names":["React","useState","useEffect","createContext","locationRequest","locationTransform","LocationContext","LocationContextProvider","children","keyword","setKeyword","location","setLocation","isLoading","setIsLoading","error","setError","onSearch","searchKeyword","console","log","length","toLowerCase","then","result","catch","err","search"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,SAASC,eAAT,EAA0BC,iBAA1B;;AACA,OAAO,IAAMC,eAAe,GAAGH,aAAa,EAArC;AAEP,OAAO,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACvD,kBAA8BP,QAAQ,CAAC,eAAD,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAgCT,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAAkCX,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOY,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA0Bb,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOc,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,aAAD,EAAmB;AAClCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,UAAU,CAACQ,aAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;;AACA,QAAI,CAACA,aAAa,CAACG,MAAnB,EAA2B;AACzB;AACD;;AACDjB,IAAAA,eAAe,CAACc,aAAa,CAACI,WAAd,EAAD,CAAf,CACGC,IADH,CACQlB,iBADR,EAEGkB,IAFH,CAEQ,UAACC,MAAD,EAAY;AAChBV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,WAAW,CAACY,MAAD,CAAX;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACD,KANH,EAOGC,KAPH,CAOS,UAACC,GAAD,EAAS;AACdZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAACU,GAAD,CAAR;AACD,KAVH;AAWD,GAlBD;;AAoBA,SACE,KAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLb,MAAAA,SAAS,EAATA,SADK;AAELE,MAAAA,KAAK,EAALA,KAFK;AAGLJ,MAAAA,QAAQ,EAARA,QAHK;AAILgB,MAAAA,MAAM,EAAE;AAAA,eAAMV,QAAN;AAAA,OAJH;AAKLR,MAAAA,OAAO,EAAPA;AALK,KADT;AAAA,cASGD;AATH,IADF;AAaD,CAvCM","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\nimport { locationRequest, locationTransform } from \"./location.service\";\nexport const LocationContext = createContext();\n\nexport const LocationContextProvider = ({ children }) => {\n  const [keyword, setKeyword] = useState(\"San Francisco\");\n  const [location, setLocation] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const onSearch = (searchKeyword) => {\n    setIsLoading(true);\n    setKeyword(searchKeyword);\n    console.log(searchKeyword);\n    if (!searchKeyword.length) {\n      return;\n    }\n    locationRequest(searchKeyword.toLowerCase())\n      .then(locationTransform)\n      .then((result) => {\n        setIsLoading(false);\n        setLocation(result);\n        console.log(result);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setError(err);\n      });\n  };\n\n  return (\n    <LocationContext.Provider\n      value={{\n        isLoading,\n        error,\n        location,\n        search: () => onSearch,\n        keyword,\n      }}\n    >\n      {children}\n    </LocationContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}