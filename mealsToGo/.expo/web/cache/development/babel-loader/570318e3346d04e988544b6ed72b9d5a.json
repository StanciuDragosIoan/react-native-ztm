{"ast":null,"code":"import camelize from \"camelize\";\nimport { locations } from \"./locations.mock\";\nexport var locationRequest = function locationRequest(searchTerm) {\n  return new Promise(function (resolve, reject) {\n    var locationMock = locations[searchTerm];\n\n    if (!locationMock) {\n      reject(\"not found\");\n    }\n\n    resolve(locationMock);\n  });\n};\nexport var locationTransform = function locationTransform(result) {\n  var formattedResponse = camelize(result);\n  var _formattedResponse$re = formattedResponse.results[0].geometry,\n      geometry = _formattedResponse$re === void 0 ? {} : _formattedResponse$re;\n  var _geometry$location = geometry.location,\n      lat = _geometry$location.lat,\n      lng = _geometry$location.lng;\n  return {\n    lat: lat,\n    lng: lng\n  };\n};","map":{"version":3,"sources":["/home/amaimon/work/udemy_courses/react_native_ztm/mealsToGo/src/services/location/location.service.js"],"names":["camelize","locations","locationRequest","searchTerm","Promise","resolve","reject","locationMock","locationTransform","result","formattedResponse","results","geometry","location","lat","lng"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,SAAT;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AAC7C,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,YAAY,GAAGN,SAAS,CAACE,UAAD,CAA9B;;AACA,QAAI,CAACI,YAAL,EAAmB;AACjBD,MAAAA,MAAM,CAAC,WAAD,CAAN;AACD;;AACDD,IAAAA,OAAO,CAACE,YAAD,CAAP;AACD,GANM,CAAP;AAOD,CARM;AAUP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAAY;AAC3C,MAAMC,iBAAiB,GAAGV,QAAQ,CAACS,MAAD,CAAlC;AACA,8BAA0BC,iBAAiB,CAACC,OAAlB,CAA0B,CAA1B,CAA1B,CAAQC,QAAR;AAAA,MAAQA,QAAR,sCAAmB,EAAnB;AACA,2BAAqBA,QAAQ,CAACC,QAA9B;AAAA,MAAQC,GAAR,sBAAQA,GAAR;AAAA,MAAaC,GAAb,sBAAaA,GAAb;AAEA,SAAO;AAAED,IAAAA,GAAG,EAAHA,GAAF;AAAOC,IAAAA,GAAG,EAAHA;AAAP,GAAP;AACD,CANM","sourcesContent":["import camelize from \"camelize\";\nimport { locations } from \"./locations.mock\";\nexport const locationRequest = (searchTerm) => {\n  return new Promise((resolve, reject) => {\n    const locationMock = locations[searchTerm];\n    if (!locationMock) {\n      reject(\"not found\");\n    }\n    resolve(locationMock);\n  });\n};\n\nexport const locationTransform = (result) => {\n  const formattedResponse = camelize(result);\n  const { geometry = {} } = formattedResponse.results[0];\n  const { lat, lng } = geometry.location;\n\n  return { lat, lng };\n};\n"]},"metadata":{},"sourceType":"module"}